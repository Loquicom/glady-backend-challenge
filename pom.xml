<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <parent>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-parent</artifactId>
    <version>2.7.0</version>
    <relativePath/> <!-- lookup parent from repository -->
  </parent>
  <groupId>com.challenge</groupId>
  <artifactId>glady-backend</artifactId>
  <version>1.0.0-SNAPSHOT</version>
  <name>glady-backend</name>
  <description>Glady backend challenge</description>
  <!-- Properties -->
  <properties>
    <java.version>17</java.version>
    <logback.version>1.2.11</logback.version>
    <docker.org>glady</docker.org>
    <docker.name>${project.artifactId}</docker.name>
    <docker.tag>${project.version}</docker.tag>
    <docker.server.port>8888</docker.server.port>
    <docker.server.debugPort>5005</docker.server.debugPort>
    <docker.db.externalPort>5432</docker.db.externalPort>
    <docker.db.name>glady</docker.db.name>
    <docker.db.user>admin</docker.db.user>
    <docker.db.pass>admin</docker.db.pass>
  </properties>
  <dependencies>
    <!-- Spring -->
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-data-jpa</artifactId>
    </dependency>
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-web</artifactId>
    </dependency>
    <!-- Database -->
    <dependency>
      <groupId>org.liquibase</groupId>
      <artifactId>liquibase-core</artifactId>
    </dependency>
    <dependency>
      <groupId>com.h2database</groupId>
      <artifactId>h2</artifactId>
      <scope>runtime</scope>
    </dependency>
    <dependency>
      <groupId>org.postgresql</groupId>
      <artifactId>postgresql</artifactId>
      <scope>runtime</scope>
    </dependency>
    <!-- Utility -->
    <dependency>
      <groupId>org.projectlombok</groupId>
      <artifactId>lombok</artifactId>
      <optional>true</optional>
    </dependency>
    <!-- Logger -->
    <dependency>
      <groupId>ch.qos.logback</groupId>
      <artifactId>logback-core</artifactId>
      <version>${logback.version}</version>
    </dependency>
    <dependency>
      <groupId>ch.qos.logback</groupId>
      <artifactId>logback-classic</artifactId>
      <version>${logback.version}</version>
    </dependency>
    <!-- Test -->
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-test</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.mockito</groupId>
      <artifactId>mockito-inline</artifactId>
      <version>4.5.1</version>
      <scope>test</scope>
    </dependency>
  </dependencies>

  <build>
    <plugins>
      <!-- Maven -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-resources-plugin</artifactId>
        <version>3.1.0</version>
        <!-- Generate docker-compose with the correct values from the pom -->
        <executions>
          <execution>
            <id>filter-docker</id>
            <phase>validate</phase>
            <goals>
              <goal>copy-resources</goal>
            </goals>
            <configuration>
              <outputDirectory>${project.build.directory}/docker</outputDirectory>
              <delimiters>
                <delimiter>${*}</delimiter>
              </delimiters>
              <resources>
                <resource>
                  <directory>docker</directory>
                  <filtering>true</filtering>
                </resource>
              </resources>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <!-- Spring -->
      <plugin>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-maven-plugin</artifactId>
        <configuration>
          <!-- Enable layer for a better docker image (and don't use the fat JAR) -->
          <layers>
            <enabled>true</enabled>
          </layers>
          <!-- Exclude Lombok -->
          <excludes>
            <exclude>
              <groupId>org.projectlombok</groupId>
              <artifactId>lombok</artifactId>
            </exclude>
          </excludes>
        </configuration>
      </plugin>
      <!-- Execute commands to prepare docker image -->
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>exec-maven-plugin</artifactId>
        <version>3.0.0</version>
        <executions>
          <!-- Create extraction dir in target -->
          <execution>
            <id>mkdir-layer-extraction</id>
            <phase>package</phase>
            <goals>
              <goal>exec</goal>
            </goals>
            <configuration>
              <executable>mkdir</executable>
              <workingDirectory>${project.basedir}</workingDirectory>
              <arguments>
                <argument>-p</argument>
                <argument>target/extraction</argument>
              </arguments>
            </configuration>
          </execution>
          <!-- Extract jar in extraction dir for docker build -->
          <execution>
            <id>extract-jar</id>
            <phase>package</phase>
            <goals>
              <goal>exec</goal>
            </goals>
            <configuration>
              <executable>java</executable>
              <workingDirectory>${project.basedir}/target</workingDirectory>
              <arguments>
                <argument>-Djarmode=layertools</argument>
                <argument>-jar</argument>
                <argument>${project.artifactId}-${project.version}.jar</argument>
                <argument>extract</argument>
                <argument>--destination</argument>
                <argument>extraction</argument>
              </arguments>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <!-- Build docker image -->
      <plugin>
        <groupId>com.spotify</groupId>
        <artifactId>dockerfile-maven-plugin</artifactId>
        <version>1.4.13</version>
        <executions>
          <execution>
            <id>default</id>
            <goals>
              <goal>build</goal>
              <goal>push</goal>
            </goals>
          </execution>
        </executions>
        <configuration>
          <repository>${docker.org}/${docker.name}</repository>
          <tag>${docker.tag}</tag>
          <buildArgs>
            <EXTRACTED>target/extraction</EXTRACTED>
          </buildArgs>
        </configuration>
      </plugin>
      <!-- Tests -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-surefire-plugin</artifactId>
        <version>${maven-surefire-plugin.version}</version>
        <configuration>
          <reuseForks>false</reuseForks>
          <forkCount>1</forkCount>
        </configuration>
      </plugin>
    </plugins>
  </build>

</project>
